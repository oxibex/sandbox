version: "3.8"
services:
  config-server:
    image: com.sandbox.microservice.configuration-server:1.0-SNAPSHOT
    ports:
      - "8888:8888"
    volumes:
      - ../configuration:/configuration
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://config-server:8888/actuator/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      logstash:
        condition: service_healthy
    networks:
      - test-network

  eureka-server:
    image: com.sandbox.microservice.eureka-server:1.0-SNAPSHOT
    ports:
      - "8761:8761"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://eureka-server:8761/actuator/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      logstash:
        condition: service_healthy
    networks:
      - test-network

  gateway:
    image: com.sandbox.microservice.gateway:1.0-SNAPSHOT
    ports:
      - "8080:8080"
    depends_on:
      logstash:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - test-network

  test-service:
    image: com.sandbox.microservice.test-client:1.0-SNAPSHOT
    networks:
      - test-network
    depends_on:
      logstash:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  test-producer:
    image: com.sandbox.microservice.test-producer:1.0-SNAPSHOT
    networks:
      - test-network
    depends_on:
      logstash:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  test-consumer:
    image: com.sandbox.microservice.test-consumer:1.0-SNAPSHOT
    networks:
      - test-network
    depends_on:
      logstash:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    networks:
      - test-network
    depends_on:
      - zookeeper
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_ENABLE_KRAFT: 'no'
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      BITNAMI_DEBUG: "true"

  zookeeper:
    image: zookeeper:3.8.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - test-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
     node.name: elastic_node_test
     discovery.type: single-node
    volumes:
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    networks:
      - test-network

  logstash:
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    environment:
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
    healthcheck:
      test: bin/logstash -t
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    networks:
      - test-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    ports:
      - "5601:5601"
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    networks:
      - test-network
    depends_on:
      - elasticsearch

#  Don't user filebeat. Use logstash-logback-encoder instead for directly sending into logstash
#
#  filebeat:
#    image: docker.elastic.co/beats/filebeat:${ELK_VERSION}
#    command: filebeat -e -strict.perms=false
#    volumes:
#      - ./logs/:/usr/share/filebeat/my_logs/
#      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
#      - /var/lib/docker/containers:/var/lib/docker/containers:ro
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#    networks:
#      - test-network

networks:
  test-network:
volumes:
  elasticsearch: